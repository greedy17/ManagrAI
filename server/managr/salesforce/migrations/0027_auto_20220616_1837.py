# Generated by Django 2.2.24 on 2022-06-16 16:25
from django.db import migrations, models
import django.db.models.deletion


def recreate_from_zoom_meeting_model(zoom_meeting_id, workflow_id):
    from managr.meetings.serializers import MeetingZoomSerializer
    from managr.zoom.models import ZoomMeeting, ZoomAuthAccount
    from managr.meetings.models import Meeting
    import json

    zoom_meeting = ZoomMeeting.objects.filter(id=zoom_meeting_id).values()[0]
    zoom_account_id = zoom_meeting.pop("zoom_account_id")
    zoom_account = ZoomAuthAccount.objects.get(id=zoom_account_id)
    participants = zoom_meeting.pop("participants")
    zoom_meeting["workflow_ref"] = str(workflow_id)
    zoom_meeting["user"] = str(zoom_account.user.id)
    zoom_meeting["source"] = "Zoom"
    zoom_meeting.pop("id")
    zoom_meeting = json.loads(json.dumps(zoom_meeting, default=str))
    serializer = MeetingZoomSerializer(data=zoom_meeting)
    serializer.is_valid(raise_exception=True)
    serializer.save()
    meeting = Meeting.objects.get(id=serializer.data.get("id"))
    meeting.participants = participants
    meeting.save()
    return


def recreate_from_non_zoom(meeting_id, workflow_id):
    from managr.core.models import MeetingPrepInstance
    from managr.meetings.serializers import MeetingSerializer
    from datetime import datetime
    from managr.meetings.models import Meeting
    import pytz

    meeting = MeetingPrepInstance.objects.get(id=meeting_id)
    event_data = meeting.event_data
    event_data["workflow_ref"] = workflow_id
    meeting_data = {}
    start_time = datetime.utcfromtimestamp(int(event_data["times"]["start_time"]))
    end_time = datetime.utcfromtimestamp(int(event_data["times"]["end_time"]))
    formatted_start = start_time.astimezone(pytz.timezone(meeting.user.timezone))
    formatted_end = end_time.astimezone(pytz.timezone(meeting.user.timezone))
    meeting_data["start_time"] = formatted_start
    meeting_data["end_time"] = formatted_end
    meeting_data["title"] = event_data["title"]
    meeting_data["provider"] = "Zoom" if event_data["provider"] == "Zoom Meeting" else "Google Meet"
    meeting_data["user"] = meeting.user.id
    meeting_data["meeting_uuid"] = "None"
    meeting_data["meta_data"] = event_data
    serializer = MeetingSerializer(data=meeting_data)
    serializer.is_valid(raise_exception=True)
    serializer.save()
    new_meeting = Meeting.objects.get(id=serializer.data.get("id"))
    new_meeting.participants = meeting.participants
    new_meeting.is_owner = True if meeting.user.email in event_data["owner"] else False
    new_meeting.save()
    return


def convert_to_meeting(apps, schema_editor):
    MeetingWorkflow = apps.get_model("salesforce", "MeetingWorkflow")
    workflows = MeetingWorkflow.objects.all()
    for meeting in workflows:
        print(meeting)
        if meeting.non_zoom_meeting is None:
            if meeting.meeting is not None:
                recreate_from_zoom_meeting_model(str(meeting.meeting.id), str(meeting.id))
                meeting.meeting = None
        else:
            if meeting.non_zoom_meeting is not None:
                recreate_from_non_zoom(str(meeting.non_zoom_meeting.id), str(meeting.id))
                meeting.non_zoom_meeting = None
        meeting.save()
    return


def convert_from_meeting(apps, schema_editor):
    MeetingWorkflow = apps.get_model("salesforce", "MeetingWorkflow")
    workflows = MeetingWorkflow.objects.all()
    for workflow in workflows:
        workflow.meeting = None
        workflow.save()
    return


class Migration(migrations.Migration):

    dependencies = [
        ("salesforce", "0026_salesforceauthaccount_extra_pipeline_fields"),
    ]

    operations = [
        migrations.RunPython(convert_to_meeting, convert_from_meeting),
        migrations.RemoveField(model_name="meetingworkflow", name="non_zoom_meeting",),
        migrations.AlterField(
            model_name="meetingworkflow",
            name="meeting",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="workflow",
                to="meetings.Meeting",
            ),
        ),
    ]

