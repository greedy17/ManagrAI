# Generated by Django 2.2.12 on 2020-05-24 17:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import managr.core.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
        ("organization", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("datetime_created", models.DateTimeField(auto_now_add=True)),
                ("last_edited", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("LIMITED", "LIMITED"), ("MANAGER", "MANAGER")],
                        default="MANAGER",
                        max_length=255,
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=255)),
                ("last_name", models.CharField(blank=True, max_length=255)),
                (
                    "phone_number",
                    models.CharField(blank=True, default="", max_length=255),
                ),
                ("is_invited", models.BooleanField(default=True, max_length=255)),
                (
                    "magic_token",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="The magic token is a randomly-generated uuid that can be used to identify the user in a non-password based login flow. ",
                    ),
                ),
                (
                    "magic_token_expiration",
                    models.DateTimeField(
                        help_text="The datetime when the magic token is expired.",
                        null=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="organization.Organization",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"ordering": ["email"],},
            managers=[("objects", managr.core.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="EmailAuthAccount",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("datetime_created", models.DateTimeField(auto_now_add=True)),
                ("last_edited", models.DateTimeField(auto_now=True)),
                ("access_token", models.CharField(max_length=255, null=True)),
                ("account_id", models.CharField(max_length=255, null=True)),
                ("email_address", models.CharField(max_length=255, null=True)),
                ("provider", models.CharField(max_length=255, null=True)),
                (
                    "sync_state",
                    models.CharField(
                        help_text="sync state is managed by web_hook after it is set for the first time",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("name", models.CharField(max_length=255, null=True)),
                ("linked_at", models.DateTimeField(null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_auth_account",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"ordering": ["email_address"],},
        ),
    ]
