# Generated by Django 2.2.17 on 2021-01-13 20:15

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import managr.core.models
import managr.utils.misc
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('organization', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime_created', models.DateTimeField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('user_level', models.CharField(choices=[('MANAGER', 'MANAGER'), ('REP', 'REP')], default='REP', max_length=255)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('phone_number', models.CharField(blank=True, default='', max_length=255)),
                ('is_invited', models.BooleanField(default=True, max_length=255)),
                ('magic_token', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, help_text='The magic token is a randomly-generated uuid that can be used to identify the user in a non-password based login flow. ')),
                ('magic_token_expiration', models.DateTimeField(blank=True, help_text='The datetime when the magic token is expired.')),
                ('profile_photo', models.ImageField(max_length=255, null=True, upload_to=managr.utils.misc.datetime_appended_filepath)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('organization', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='organization.Organization')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['email'],
            },
            managers=[
                ('objects', managr.core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='NotificationOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime_created', models.DateTimeField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Friendly Name', max_length=128)),
                ('description', models.TextField(blank=True, help_text='this will show up as a tooltip for the option')),
                ('default_value', models.BooleanField(default=True, help_text='All options are Boolean, the value here populates the default for the user')),
                ('user_groups', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('MANAGER', 'MANAGER'), ('REP', 'REP')], max_length=255), blank=True, default=list, help_text='An Array of user types that have access to this setting', size=None)),
                ('notification_type', models.CharField(choices=[('REMINDER', 'Reminder'), ('EMAIL', 'Email'), ('SYSTEM', 'System'), ('EMAIL_OPENED', 'Email Opened'), ('OPPORTUNITY.INACTIVE', 'Opportunity Inactive'), ('OPPORTUNITY.STALLED_IN_STAGE', 'Opportunity Stalled in Stage'), ('OPPORTUNITY.LAPSED_EXPECTED_CLOSE_DATE_1', 'Opportunity Lapsed Expected Close Date By 1 day or more'), ('OPPORTUNITY.LAPSED_EXPECTED_CLOSE_DATE_14', 'Opportunity Lapsed Expected Close Date By 14 days or more'), ('OPPORTUNITY.LAPSED_EXPECTED_CLOSE_DATE_30', 'Opportunity Lapsed Expected Close Date By 30 days or more')], help_text='Email or Alert', max_length=255)),
                ('resource', models.CharField(choices=[('ACCOUNT', 'Account'), ('ORGANIZATION', 'Organization'), ('REPORT', 'Report'), ('OPPORTUNITY', 'Opportunity')], help_text='select a resource to apply notification to', max_length=255, null=True)),
                ('key', models.CharField(blank=True, help_text='unique identifier for notification option', max_length=255, null=True)),
            ],
            options={
                'ordering': ['-datetime_created'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime_created', models.DateTimeField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('notify_at', models.DateTimeField(help_text='Set a time for the notification to be executed, if this is a reminder it can be something like 5 minutes before time                                        if it is an email it can be the time the email is received ', null=True)),
                ('notified_at', models.DateTimeField(help_text='date time when the notification was executed', null=True)),
                ('title', models.CharField(help_text='a title for the notification', max_length=255, null=True)),
                ('notification_type', models.CharField(choices=[('REMINDER', 'Reminder'), ('EMAIL', 'Email'), ('SYSTEM', 'System'), ('EMAIL_OPENED', 'Email Opened'), ('OPPORTUNITY.INACTIVE', 'Opportunity Inactive'), ('OPPORTUNITY.STALLED_IN_STAGE', 'Opportunity Stalled in Stage'), ('OPPORTUNITY.LAPSED_EXPECTED_CLOSE_DATE_1', 'Opportunity Lapsed Expected Close Date By 1 day or more'), ('OPPORTUNITY.LAPSED_EXPECTED_CLOSE_DATE_14', 'Opportunity Lapsed Expected Close Date By 14 days or more'), ('OPPORTUNITY.LAPSED_EXPECTED_CLOSE_DATE_30', 'Opportunity Lapsed Expected Close Date By 30 days or more')], help_text='type of Notification being created', max_length=255, null=True)),
                ('resource_id', models.CharField(help_text='Id of the resource if it is an email it will be the thread id', max_length=255, null=True)),
                ('notification_class', models.CharField(choices=[('ALERT', 'ALERT'), ('EMAIL', 'EMAIL'), ('SLACK', 'SLACK')], help_text='Classification of notification, email, alert, slack', max_length=255)),
                ('viewed', models.BooleanField(default=False)),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Details about the notification')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-notify_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageAuthAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime_created', models.DateTimeField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('account_sid', models.CharField(max_length=128)),
                ('capabilities', django.contrib.postgres.fields.jsonb.JSONField(default=dict, max_length=128)),
                ('date_created', models.DateTimeField(max_length=128)),
                ('date_updated', models.DateTimeField(max_length=128)),
                ('friendly_name', models.CharField(max_length=128)),
                ('identity_sid', models.CharField(max_length=128, null=True)),
                ('origin', models.CharField(max_length=128)),
                ('sid', models.CharField(max_length=128, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=128)),
                ('sms_method', models.CharField(max_length=128)),
                ('sms_url', models.CharField(help_text='the webhook url for incoming messages', max_length=128)),
                ('status_callback', models.CharField(help_text='the webhook url for message status', max_length=128)),
                ('status_callback_method', models.CharField(max_length=128)),
                ('uri', models.CharField(max_length=128)),
                ('voice_method', models.CharField(max_length=128)),
                ('voice_url', models.CharField(max_length=128, null=True)),
                ('status', models.CharField(max_length=128)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='message_auth_account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['datetime_created'],
            },
        ),
        migrations.CreateModel(
            name='EmailAuthAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime_created', models.DateTimeField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('access_token', models.CharField(max_length=255, null=True)),
                ('account_id', models.CharField(max_length=255, null=True)),
                ('email_address', models.CharField(max_length=255, null=True)),
                ('provider', models.CharField(max_length=255, null=True)),
                ('sync_state', models.CharField(help_text='sync state is managed by web_hook after it is set for the first time', max_length=255, null=True)),
                ('name', models.CharField(max_length=255, null=True)),
                ('linked_at', models.DateTimeField(null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='email_auth_account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['email_address'],
            },
        ),
        migrations.CreateModel(
            name='NotificationSelection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime_created', models.DateTimeField(auto_now_add=True)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('value', models.BooleanField(help_text='If no option is selected it will take the default value')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selections', to='core.NotificationOption')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-datetime_created'],
                'unique_together': {('user', 'option')},
            },
        ),
    ]
