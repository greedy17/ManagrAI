# Change this to your project's node version
image: node:12.0.0

clone:
  depth: full

djangoTests: &djangoTests
  name: Django Tests
  caches:
    - pip
  image: python:3.7.3
  script:
    - pip install pipenv
    - pipenv install --system --deploy --ignore-pipfile
    - cp server/.env.example .env
    - cd server
    - IN_CI=True python manage.py test
  services:
    - postgres

e2eTests: &e2eTests
  name: E2E tests
  caches:
    - node
    - npm
    - cypress
  image: cypress/base:10
  script:
    - cd client
    - NPM_PRIVATE_TOKEN=$NPM_PRIVATE_TOKEN npm ci
    - NPM_PRIVATE_TOKEN=$NPM_PRIVATE_TOKEN npm run ci

vueAppBuild: &vueAppBuild
  name: Build Vue App
  caches:
    - node
    - npm
    - cypress
  script:
    - cd client
    - NPM_PRIVATE_TOKEN=$NPM_PRIVATE_TOKEN npm ci
    - NPM_PRIVATE_TOKEN=$NPM_PRIVATE_TOKEN npm run build
  artifacts:
    - dist/**/

cleanupDockerResources: &cleanupDockerResources
  name: Clean Up Docker Resources
  image: atlassian/default-image:2
  script:
    - docker image prune -f
    - docker container prune -f
    - docker volume prune -f
    - docker network prune -f

# fargateStagingDeployment: &fargateStagingDeployment
#   name: Deploy Staging to AWS Fargate
#   image: atlassian/default-image:2
#   deployment: Staging
#   services:
#     - docker
#   caches:
#     - docker
#   script:
#     # Install jq and the AWS CLI
#     - apt-get update && apt-get install -y jq
#     - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#     - unzip awscliv2.zip
#     - ./aws/install
  
#     # Build Docker images
#     - docker build -f deploy/server/Dockerfile --build-arg NPM_PRIVATE_TOKEN --build-arg "VUE_APP_DD_ENV=fargate:staging" -t $MANAGR_SERVER_IMAGE_NAME .
#     - docker build -f deploy/tasks/Dockerfile -t $MANAGR_SERVER_SCHEDULED_TASKS_IMAGE_NAME .
#     - docker build -f deploy/nginx/Dockerfile -t $MANAGR_SERVER_NGINX_IMAGE_NAME deploy/nginx/

#     # Push to ECR
#     - pipe: atlassian/aws-ecr-push-image:1.3.0
#       variables:
#         IMAGE_NAME: $MANAGR_SERVER_IMAGE_NAME
#         TAGS: 'staging-${BITBUCKET_COMMIT} latest' # Optional
#         # DEBUG: "<boolean>" # Optional
#     - pipe: atlassian/aws-ecr-push-image:1.3.0
#       variables:
#         IMAGE_NAME: $MANAGR_SERVER_SCHEDULED_TASKS_IMAGE_NAME
#         TAGS: 'staging-${BITBUCKET_COMMIT} latest' # Optional
#         # DEBUG: "<boolean>" # Optional
#     - pipe: atlassian/aws-ecr-push-image:1.3.0
#       variables:
#         IMAGE_NAME: $MANAGR_SERVER_NGINX_IMAGE_NAME
#         TAGS: 'staging-${BITBUCKET_COMMIT} latest' # Optional
#         # DEBUG: "<boolean>" # Optional

#     # Dynamically update Fargate task definition
#     - TASK_FAMILY="managr-app-task-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh

#     # Deploy to Fargate
#     - pipe: atlassian/aws-ecs-deploy:1.6.2
#       variables:
#         CLUSTER_NAME: $AWS_ECS_CLUSTER_NAME
#         SERVICE_NAME: $AWS_ECS_SERVICE_NAME
#         TASK_DEFINITION: 'task-definition.json' # Optional
#         FORCE_NEW_DEPLOYMENT: 'true' # Optional
#         WAIT: 'true' # Optional 
#         # DEBUG: 'true' # Optional

#     - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-processalltasks-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
#     - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-processsyncqueues-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
#     - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-runalerts-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
#     - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-clearsfstaledata-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
#     - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-syncresourcedata-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
#     - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-syncresourcefields-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh

fargateStagingDeployment_BuildImages: &fargateStagingDeployment_BuildImages
  name: Build Docker Images for Staging
  image: atlassian/default-image:2
  services:
    - docker
  caches:
    - docker
  script:
    - apt-get update && apt-get install -y jq
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - export MANAGR_SERVER_IMAGE_TAG="staging-${BITBUCKET_COMMIT}"
    - docker build -f deploy/server/Dockerfile --build-arg NPM_PRIVATE_TOKEN --build-arg "VUE_APP_DD_ENV=fargate:staging" -t "$MANAGR_SERVER_IMAGE_NAME:$MANAGR_SERVER_IMAGE_TAG" .
    - docker build -f deploy/tasks/Dockerfile -t "$MANAGR_SERVER_SCHEDULED_TASKS_IMAGE_NAME:$MANAGR_SERVER_IMAGE_TAG" .
    - docker build -f deploy/nginx/Dockerfile -t "$MANAGR_SERVER_NGINX_IMAGE_NAME:$MANAGR_SERVER_IMAGE_TAG" deploy/nginx/

fargateStagingDeployment_Deploy: &fargateStagingDeployment_Deploy
  name: Deploy Staging to AWS Fargate
  image: atlassian/default-image:2
  services:
    - docker
  script:
    - export AWS_DEFAULT_REGION=us-east-1
    - pipe: atlassian/aws-ecs-deploy:1.6.2
      variables:
        CLUSTER_NAME: $AWS_ECS_CLUSTER_NAME
        SERVICE_NAME: $AWS_ECS_SERVICE_NAME
        TASK_DEFINITION: 'task-definition.json' # Optional
        FORCE_NEW_DEPLOYMENT: 'true' # Optional
        WAIT: 'true' # Optional 
        # DEBUG: 'true' # Optional

fargateStagingDeployment_UpdateTask: &fargateStagingDeployment_UpdateTask
  name: Update Fargate Task Definition for Staging
  image: atlassian/default-image:2
  services:
    - docker
  script:
    - TASK_FAMILY="managr-app-task-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-processalltasks-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-processsyncqueues-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-runalerts-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-clearsfstaledata-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-syncresourcedata-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-syncresourcefields-staging" IMAGE_TAG="staging-$BITBUCKET_COMMIT" ./deploy/update-task.sh




fargateProdDeployment: &fargateProdDeployment
  name: Deploy Prod to AWS Fargate
  image: atlassian/default-image:2
  deployment: Production
  services:
    - docker
  caches:
    - docker
  script:
    # Install jq and the AWS CLI
    - apt-get update && apt-get install -y jq
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
  
    # Build Docker images
    - docker build -f deploy/server/Dockerfile --build-arg NPM_PRIVATE_TOKEN --build-arg "VUE_APP_DD_ENV=fargate:prod" -t $MANAGR_SERVER_IMAGE_NAME .
    - docker build -f deploy/tasks/Dockerfile -t $MANAGR_SERVER_SCHEDULED_TASKS_IMAGE_NAME .
    - docker build -f deploy/nginx/Dockerfile -t $MANAGR_SERVER_NGINX_IMAGE_NAME deploy/nginx/

    # Push to ECR
    - pipe: atlassian/aws-ecr-push-image:1.3.0
      variables:
        IMAGE_NAME: $MANAGR_SERVER_IMAGE_NAME
        TAGS: 'prod-${BITBUCKET_COMMIT} latest' # Optional
        # DEBUG: "<boolean>" # Optional
    - pipe: atlassian/aws-ecr-push-image:1.3.0
      variables:
        IMAGE_NAME: $MANAGR_SERVER_SCHEDULED_TASKS_IMAGE_NAME
        TAGS: 'prod-${BITBUCKET_COMMIT} latest' # Optional
        # DEBUG: "<boolean>" # Optional
    - pipe: atlassian/aws-ecr-push-image:1.3.0
      variables:
        IMAGE_NAME: $MANAGR_SERVER_NGINX_IMAGE_NAME
        TAGS: 'prod-${BITBUCKET_COMMIT} latest' # Optional
        # DEBUG: "<boolean>" # Optional

    # Dynamically update Fargate task definition
    - TASK_FAMILY="managr-app-task-prod" IMAGE_TAG="prod-$BITBUCKET_COMMIT" ./deploy/update-task.sh

    # Deploy to Fargate
    - pipe: atlassian/aws-ecs-deploy:1.6.2
      variables:
        CLUSTER_NAME: $AWS_ECS_CLUSTER_NAME
        SERVICE_NAME: $AWS_ECS_SERVICE_NAME
        TASK_DEFINITION: 'task-definition.json' # Optional
        FORCE_NEW_DEPLOYMENT: 'true' # Optional
        WAIT: 'true' # Optional 
        # DEBUG: '<string>' # Optional

    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-processalltasks-prod" IMAGE_TAG="prod-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-processsyncqueues-prod" IMAGE_TAG="prod-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-runalerts-prod" IMAGE_TAG="prod-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-clearsfstaledata-prod" IMAGE_TAG="prod-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-syncresourcedata-prod" IMAGE_TAG="prod-$BITBUCKET_COMMIT" ./deploy/update-task.sh
    - SCHEDULED_TASK_FAMILY="managr-app-scheduled-tasks-syncresourcefields-prod" IMAGE_TAG="prod-$BITBUCKET_COMMIT" ./deploy/update-task.sh

pipelines:
  pull-requests:
    '**':
      - parallel:
          - step: *vueAppBuild
          - step: *e2eTests
          - step: *djangoTests
    'feature-branch/*':
      - parallel:
          - step: *vueAppBuild
          - step: *e2eTests
          - step: *djangoTests
  branches:
    develop:
      - parallel:
          - step: *djangoTests
          - step: *e2eTests
      - step: *fargateStagingDeployment_BuildImages
        size: 4x
      - step: *fargateStagingDeployment_UpdateTask
      - step: *fargateStagingDeployment_Deploy
    master:
      - parallel:
          - step: *djangoTests
          - step: *e2eTests
      - step: *fargateProdDeployment
        size: 4x

definitions:
  caches:
    npm: $HOME/.npm
    cypress: $HOME/.cache/Cypress
  services:
    postgres:
      image: postgres
      environment:
        # Update the POSTGRES_USER variable to what is specified in your .env file.
        POSTGRES_DB: test_db
        POSTGRES_USER: managr
        POSTGRES_PASSWORD: manager
    docker:
      memory: 2048
